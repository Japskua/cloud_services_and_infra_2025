services:
    traefik:
        image: traefik:v3.3.3
        command:
            - "--configFile=/app/configs/traefik.toml" # This is the traefik configuration file
        volumes:
            - ./traefik/traefik.toml:/app/configs/traefik.toml:ro # We want to mount our local traefik.toml file
            - ./traefik/dynamic_conf.toml:/app/configs/dynamic_conf.toml:ro # We want to mount our local dynamic_conf.toml file
            - ./traefik/certs:/certs:ro # We are adding the certificates to the container as read only (:ro)
            - /var/run/docker.sock:/var/run/docker.sock:rw
        labels:
            - "traefik.enable=true" # We enable traefik for this service
            - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)" # This is the traefik service URL
            - "traefik.http.routers.traefik.entrypoints=websecure" # We want to use websecure as entrypoint (HTTPS)
            - "traefik.http.routers.traefik.tls=true" # Enable the HTTPS router
            - "traefik.http.routers.traefik.service=api@internal" # This is just internal configuration
        environment:
            - TZ=Europe/Helsinki # Lets set the environment variable TZ to Europe/Helsinki
        ports:
            - "80:80" # Open port 80 to the outside world
            - "443:443" # Open port 443 to the outside world
        networks:
            - cloud_project # And we use this network to connect to the other services
    backend:
        image: project-backend:dev # This is the image we have built. If missing, check build_images.sh
        networks:
            - cloud_project # Note the network is the same as for traefik! Otherwise this won't work!
        command: bun run dev # This is the command we want to run. We are now overriding the default command.
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.backend.rule=Host(`backend.localhost`)" # This is the backend service URL
            - "traefik.http.routers.backend.entrypoints=websecure"
            - "traefik.http.routers.backend.tls=true"
            - "traefik.http.services.backend.loadbalancer.server.port=3000"

networks:
    cloud_project:
        name: cloud_project # We are creating a network with the name cloud_project
        driver: bridge # We are using the bridge driver
